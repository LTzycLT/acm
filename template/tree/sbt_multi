const int N = 2000000;

int key[N],sz[N],lc[N],rc[N],w[N],sum[N];
int num;


void newnode(int i)
{
    key[i] = sz[i] = lc[i] = rc[i] = w[i] = sum[i] = 0;
}
class sbtree
{
public:
    int root;
    void clear()
    {
        newnode(++num);
        root = num;
        sz[root] = 1;
    }
    void Insert(int &root,int val,int ww)
    {
        if (root == 0)
        {
            root = ++num;
            lc[root] = rc[root] = 0;
            sz[root] = 1;
            key[root] = val;
            w[root] = ww;
            sum[root] = ww;
            return ;
        }
        sum[root] += ww;
        sz[root] ++;
        if (val < key[root])
        {
            Insert(lc[root] , val , ww);
        }
        else
        {
            Insert(rc[root] , val , ww);
        }
        maintain(root , !(val < key[root]));
    }

    int query(int val){
        int tmp = root;
        int ans = 0;
        while(tmp){
            if(key[tmp] <= val){
                ans += sum[lc[tmp]] + w[tmp];
                tmp = rc[tmp];
            }
            else{
                tmp = lc[tmp];
            }
        }
        return ans;
    }

    void LeftRotate(int &root)
    {
        int temp = rc[root];
        rc[root] = lc[temp];
        lc[temp] = root;
        sz[temp] = sz[root];
        sum[temp] = sum[root];
        sz[root] = 1 + sz[lc[root]] + sz[rc[root]];
        sum[root] = sum[lc[root]] + sum[rc[root]] + w[root];
        root = temp;
    }
    void RightRotate(int &root)
    {
        int temp = lc[root];
        lc[root] = rc[temp];
        rc[temp] = root;
        sz[temp] = sz[root];
        sum[temp] = sum[root];
        sz[root] = 1 + sz[lc[root]] + sz[rc[root]];
        sum[root] = sum[lc[root]] + sum[rc[root]] + w[root];
        root = temp;
    }
    void maintain(int &root , bool flag)
    {
        if (root == 0) return ;
        if ( !flag )   // 调整左子树
        {
            if ( sz[lc[lc[root]]] > sz[rc[root]] )
            {
                RightRotate( root );
            }
            else if ( sz[rc[lc[root]]] > sz[rc[root]] )
            {
                LeftRotate( lc[root] );
                RightRotate( root );
            }
            else
            {
                return ;
            }
        }
        else     // 调整右子树
        {
            if ( sz[rc[rc[root]]] > sz[lc[root]] )
            {
                LeftRotate( root );
            }
            else if ( sz[lc[rc[root]]] > sz[lc[root]] )
            {
                RightRotate( rc[root] );
                LeftRotate( root );
            }
            else
            {
                return ;
            }
        }
        maintain(lc[root] , false);
        maintain(rc[root] , true);
        maintain(root , false);
        maintain(root , true);
    }

} sbt[30000];
